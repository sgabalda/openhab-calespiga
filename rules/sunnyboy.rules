
val username = "usr"
val pass = "sergi00xp"
val login_url = "http://192.168.2.115/dyn/login.json"

val data_url = "http://192.168.2.115/dyn/getValues.json"
val total_power_code = "6100_40263F00"
val freq_code = "6100_00465700"
val lines_power = "6380_40251E00"

var String token = null
val Integer refreshInterval = 60
var Integer currentInterval = 0

var Timer zeroPowerIfTooMuchTimeTimer = null
val minutesWithoutPowerMeasurementBeforSettingZero = 5

var Timer refreshTokenOnError = null
val secondsRefreshTokenOnError = 60

rule "Refresh sunny boy token"
when
    Item SunnyBoy_Token_Refresh received command
then
    if(refreshTokenOnError!==null){
        refreshTokenOnError.cancel()
        refreshTokenOnError=null
    }
    val notification_json = '{"right":"' + username + '","pass":"' + pass + '"}'
    val String rawToken = sendHttpPostRequest(login_url, "application/json", notification_json)
    logDebug("SunnyBoy","Obtingut resposta del post: "+rawToken)
    var String error = transform("JSONPATH", "$.err", rawToken)
    if(error!==null && error.equals(rawToken)){
        token = transform("JSONPATH", "$.result.sid", rawToken)
        logDebug("SunnyBoy","El token es: "+token)
        SunnyBoy_Token.postUpdate(token)
    }else{
        logError("SunnyBoy", "No s'ha pogut obtenir el token: "+rawToken+", obtenint-lo en uns segons")
        refreshTokenOnError = createTimer(now.plusSeconds(secondsRefreshTokenOnError), [|
            refreshTokenOnError = null
            SunnyBoy_Token_Refresh.sendCommand("ToRefresh")
        ])
    }
end

rule "Check periodic refresh"
when
    //Time cron "0 0 * ? * * *"
    Time cron "0 0/15 6-21 ? * * *"
    or System started
then
    var refreshToken = true
    if(token!==null){
        if(currentInterval < refreshInterval){
            currentInterval ++
            refreshToken = false
            logDebug("SunnyBoy","token still valid, not refreshing it: "+currentInterval)
        }else{
            currentInterval = 0
            logInfo("SunnyBoy","token not yet valid, refreshing it ")
        }
    }
    if(refreshToken){
        SunnyBoy_Token_Refresh.sendCommand("ToRefresh")
    }
end

rule "Produccio fotovoltaica rule"
when
    //Time cron "0/10 * * ? * * *"
    Time cron "0/10 * 6-21 ? * * *"
then
    if(token !== null){

        SunnyBoy_Time_Attempt.postUpdate(now.toString)
        val notification_json = '{"destDev":[],"keys":["' 
            + total_power_code + '","'
            + freq_code + '","'
            + lines_power + '"]}'
        logDebug("SunnyBoy","Enviant peticio: "+notification_json)
        val String rawData = sendHttpPostRequest(data_url+"?sid=" + token, "application/json", notification_json)
        logDebug("SunnyBoy","Obtingut resposta del post: "+rawData)
        var String error = transform("JSONPATH", "$.err", rawData)
        logDebug("SunnyBoy","el possible error es " + error)
        if(error!==null && error.equals(rawData)){ 
            var String data = transform("JSONPATH", "$.result.0156-76BCE994."+ total_power_code +".1[0].val", rawData)
            logDebug("SunnyBoy","les dades obtingudes son: " + error)
            var Float potUsada=0.0
            try {
                potUsada = Float::parseFloat(data)
            } catch (Exception e) {
                logInfo("SunnyBoy","La pot usada es null, posant-la a 0")
            }
            logDebug("SunnyBoy","La pot usada es: "+potUsada)
            SunnyBoy_Pot_Usada.postUpdate(potUsada.intValue)
            
            data = transform("JSONPATH", "$.result.0156-76BCE994."+lines_power+".1[0].val", rawData)
            var Float potLinea1=0.0
            try {
                potLinea1 = Float::parseFloat(data)
            } catch (Exception e) {
                logInfo("SunnyBoy","La pot linea 1 es null, posant-la a 0")
            }
            logDebug("SunnyBoy","La pot linea 1 es: "+potLinea1)
            SunnyBoy_Pot_Actual_Linea1.postUpdate(potLinea1.intValue)

            data = transform("JSONPATH", "$.result.0156-76BCE994."+lines_power+".1[1].val", rawData)
            var Float potLinea2=0.0
            try {
                potLinea2 = Float::parseFloat(data)
            } catch (Exception e) {
                logInfo("SunnyBoy","La pot linea 2 es null, posant-la a 0")
            }
            logDebug("SunnyBoy","La pot linea 2 es: "+potLinea2)
            SunnyBoy_Pot_Actual_Linea2.postUpdate(potLinea2.intValue)
            
            data = transform("JSONPATH", "$.result.0156-76BCE994."+freq_code+".1[0].val", rawData)
            var Float freq=50.0
            try {
                freq = Float::parseFloat(data)/100
            } catch (Exception e) {
                logInfo("SunnyBoy","freq es null, posant-la a 50")
            }
            logDebug("SunnyBoy","La freq es: "+freq)
            SunnyBoy_Freq.postUpdate(freq)
            
            var Float tot_power = 0.0
            var Float potRebutjada = 0.0
            if(freq<=51.0){ 
                logDebug("SunnyBoy","No pot rebutjada!")
                potRebutjada = 0 
                tot_power = potUsada
            }
            else if(freq>=52.0){
                logDebug("SunnyBoy","Tota rebutjada!")
                tot_power=3000
                potRebutjada = tot_power - potUsada
            }
            else {
                logDebug("SunnyBoy","Some rebutjada, some used")
                tot_power = potUsada / (52-freq)
                if(tot_power>3000){
                    tot_power = 3000
                }
                potRebutjada = tot_power - potUsada
            }

            logDebug("SunnyBoy","les potencies son: Tot: "+tot_power+", reb:"+potRebutjada)
            SunnyBoy_Pot_Rebutjada.postUpdate(potRebutjada)
            SunnyBoy_Pot_Actual.postUpdate(tot_power)
            SunnyBoy_Time_Read.postUpdate(now.toString)
            if(tot_power>0){
                logDebug("SunnyBoy","Donat que la potencia no es 0, actualitzem la data de la ultima no 0")
                SunnyBoy_Time_Not_Zero.postUpdate(now.toString)
            }
            //set up the timer to set the measurements to 0 if too much time without 
            // measurements => thsi way the rest of the system does not think that
            // there is unused power from an old measurement.
            if(zeroPowerIfTooMuchTimeTimer!==null){
                logDebug("SunnyBoy","El timer de deteccio de potencia no actualitzada s'ha cancelat")
                zeroPowerIfTooMuchTimeTimer.cancel()
                zeroPowerIfTooMuchTimeTimer=null
            }
            logDebug("SunnyBoy","Configurant el timer de deteccio de potencia no actualitzada")
            zeroPowerIfTooMuchTimeTimer = createTimer(now.plusMinutes(minutesWithoutPowerMeasurementBeforSettingZero), [|
                zeroPowerIfTooMuchTimeTimer = null
                logError("SunnyBoy", "Deteccio de potencia no actualitzada! Posant a 0 les potencies")
                SunnyBoy_Pot_Rebutjada.postUpdate(potRebutjada)
                SunnyBoy_Pot_Actual.postUpdate(tot_power)
            ])

        }else if(error!==null && error.equals("401")){
            logWarn("SunnyBoy","Obtingut 401 del POST "+rawData+", posant el token a null i for√ßant refresh del token")
            token = null
            SunnyBoy_Token_Refresh.sendCommand("ToRefresh")
        }else{
            logError("SunnyBoy", "No s'ha pogut obtenir les dades: Error: "+error)
        }
    }
    
end

// per assegurar que a la nit no s'interpreta que hi ha potencia produida o rebutjada
rule "Assegura nit zero"
when
    //Time cron "0/10 * * ? * * *"
    Time cron "0 0 0,1,2,3,4,5,22,23 ? * * *"
then
    SunnyBoy_Pot_Rebutjada.postUpdate(0)
    SunnyBoy_Pot_Actual.postUpdate(0)
    SunnyBoy_Pot_Usada.postUpdate(0)
end