import java.util.Date
import java.time.ZonedDateTime

var long lastChangePower = -1
val long COMMS_TIMEOUT_SECONDS = 30
var Timer commsTimer = null

//rules to manage unused power

rule "Potencia disponible calentador"
when 
	Item Calentador_AvailablePower received command
then
	val gestioAutoCalentador = GestioAutomaticaCalentador.state
	var requiredPower = 0
	if(gestioAutoCalentador == "auto"){
		logInfo("Calentador.rules", "Received new power available for Calentador auto")
		val receivedEstat = Calentador_Estat_ProxyItem.state.toString
        if(receivedEstat == "HOT"){
            logInfo("Calentador.rules", "The calentador is hot, so required power set to 0")
            requiredPower = 0
        }else{
            val oldPowerState = receivedCommand
            var availablePower = 0.0
            if(oldPowerState != NULL){
                availablePower = (oldPowerState as Number).doubleValue
            }
            if(availablePower >= 2000){
                requiredPower = 2000
            }else if(availablePower >= 1000){
                requiredPower = 1000
            }else if(availablePower >= 500){
                requiredPower = 500
            }else{
                requiredPower = 0
            }
            logInfo("Calentador.rules", "The power that the Calentador will use is "+requiredPower)
        }
	}else{
		logInfo("Calentador.rules", "Received unused power, but calentador is manual, so ignoring it")
	}
	Calentador_RequiredPower.sendCommand(requiredPower)
	logInfo("Calentador.rules", "Sent required power to Calentador_RequiredPower")
end

rule "update calentador required power"
when
	Item Calentador_RequiredPower received command
then
    logInfo("Calentador.rules", "Required power updated, notifying the DestinationDeviceUpdated")
	DestinationDeviceUpdated.sendCommand("calentador")
end

rule "Apply power calentador"
when
	Item Calentador_ApplyChange received command
then
    val gestioAutoCalentador = GestioAutomaticaCalentador.state
    logInfo("Calentador.rules", "Received command to apply the power")
    if(gestioAutoCalentador == "auto"){
        logInfo("Calentador.rules", "Going to apply the required power")
        val requiredPowerState = Calentador_RequiredPower.state
        var powerToApply = 0
        if(requiredPowerState != NULL){
            powerToApply = (requiredPowerState as Number).intValue
        }
        logInfo("Calentador.rules", "The required power to apply is "+powerToApply)
        Calentador_Potencia_ProxyItem.sendCommand(powerToApply+"")
        Calentador_UsedPower.sendCommand(powerToApply)
        DestinationDeviceApplied.sendCommand("calentador")
    }else{
        logInfo("Calentador.rules", "Gestio is not automatic, so not applying required power, but notifying as applied")
        Calentador_UsedPower.sendCommand(0)
        DestinationDeviceApplied.sendCommand("calentador")
    }
end

//rules not to manage unused power
rule "Canvi gestio calentador"
when
    Item GestioAutomaticaCalentador received command
then
    val gestioAutoCalentador = receivedCommand
    if(gestioAutoCalentador != "auto"){
        val currentPowerSelection = Calentador_Potencia_UserSelection.state
        logInfo("Calentador.rules", "Gestio Calentador changed to manual. Refreshed status to "+currentPowerSelection)
        Calentador_Potencia_ProxyItem.sendCommand(currentPowerSelection+"")
        //we are not using unused power, because all is manual.
        Calentador_UsedPower.sendCommand(0)
    }else{
        logInfo("Calentador.rules", "Gestio Calentador changed to auto, starting from 0 used power")
        Calentador_UsedPower.sendCommand(0)
        Calentador_Potencia_ProxyItem.sendCommand("0")
    }
end

rule "Canvi manual calentador"
when 
    Item Calentador_Potencia_UserSelection received command
then
    val gestioAutoCalentador = GestioAutomaticaCalentador.state
    if(gestioAutoCalentador != "auto"){
        val currentPowerSelection = receivedCommand
        logInfo("Calentador.rules", "Gestio Calentador is manual. Refreshed status to "+currentPowerSelection)
        Calentador_Potencia_ProxyItem.sendCommand(currentPowerSelection+"")
        //we are not using unused power, because all is manual.
        Calentador_UsedPower.sendCommand(0)
    }else{
        logInfo("Calentador.rules", "Gestio Calentador is auto. Changing the power has no effects")
    }
end

rule "Forward termostat state from MQTT calentador"
when
    //Item ArduinoCalentadorThing_CalentadorTermostatStatus received update
    Item Calentador_Termostat_ProxyRecepcio received update
then
    //Calentador_Estat_ProxyItem.postUpdate(ArduinoCalentadorThing_CalentadorTermostatStatus.state.toString)
    Calentador_Estat_ProxyItem.postUpdate(Calentador_Termostat_ProxyRecepcio.state.toString)
    
    val now = ZonedDateTime::now
    val nowDateType = new DateTimeType(now) 
    // update the last communication item
    Calentador_Ultima_Connexio.postUpdate(nowDateType)

    //cancel previous timer and set a new one to put offline if there is no more messages.
    if(commsTimer!==null){
        logDebug("Calentador.rules","comms timer not null, cancelling it")
        commsTimer.cancel()
    }
    commsTimer = createTimer(now.plusSeconds(COMMS_TIMEOUT_SECONDS.longValue), [|
                logDebug("Calentador.rules","Timer reached, changing state to offline")
                commsTimer = null
                //we are not using unused power, because it is offline.
                Calentador_UsedPower.sendCommand(0)
                //turn off
                Calentador_Potencia_ProxyItem.sendCommand(0+"") 
                Calentador_Termostat_UserDisplay.sendCommand("OFFLINE")
            ])
end

rule "forward last hot date calentador"
when
    Item Calentador_Hot_Date_Proxy  received update
then
    val value = Calentador_Hot_Date_Proxy.state
    Calentador_Hot_Date.postUpdate(value.toString)
end

rule "update termostat state from MQTT calentador"
when
    Item Calentador_Estat_ProxyItem  received update
then
    val now = ZonedDateTime::now
    val nowDateType = new DateTimeType(now) 
    val receivedEstat = Calentador_Estat_ProxyItem.state.toString
    logInfo("Calentador.rules", "Calentador termostat changed to "+receivedEstat)
    if(receivedEstat == "HOT"){
        logInfo("Calentador.rules", "Calentador is HOT, changing last HOT date and turning off")
        Calentador_Hot_Date_Proxy.postUpdate(nowDateType)

        //we are not using unused power, because it is hot.
        Calentador_UsedPower.sendCommand(0)
        //turn off
        Calentador_Potencia_ProxyItem.sendCommand(0+"")
    }
    Calentador_Termostat_UserDisplay.postUpdate(receivedEstat)   

    logDebug("Calentador.rules","Comms timer resetted, now updating energy")
end

rule "Turn On Calentador"
when
    Item Calentador_Potencia_ProxyItem received command
then
    Calentador_Potencia_ProxyEmissio.sendCommand(receivedCommand);
    logInfo("Calentador.rules", "Sending to calentador MQTT "+receivedCommand)
end

rule "update display state from MQTT calentador"
when
    Item Calentador_Potencia_ProxyRecepcio received update
then
    val receivedEstat = Calentador_Potencia_ProxyRecepcio.state.toString
    var newPower = 0
    if(receivedEstat != "OFF"){
        newPower = Double::parseDouble(receivedEstat)
    }
    
    val oldPowerState = Calentador_Potencia_UserDisplay.state
    var oldPower = 0.0
    if(oldPowerState != NULL){
        oldPower = (oldPowerState as Number).doubleValue
    }

    val now_millis = (new Date()).time
    logInfo("Calentador.rules", "Going to update energy from "+lastChangePower+" with "+oldPower)
    if(lastChangePower>0 ){
		val termostat = Calentador_Termostat_UserDisplay.state
		if(termostat != "HOT"){
			val timeMillis = now_millis - lastChangePower
	    	val timeHours = (timeMillis/1000.0)/3600
	    	val energyToAdd = oldPower*timeHours/1000

            var energyCurrent = 0.0

            val calentadorEnergiaState = Calentador_Energia_Avui.state
            if(calentadorEnergiaState != NULL){
                energyCurrent = ( calentadorEnergiaState as Number).doubleValue
            }

	    	logInfo("Calentador.rules", "Adding energy calentador "+energyToAdd+" to "+energyCurrent)

	    	Calentador_Energia_Avui.postUpdate(energyCurrent + energyToAdd)
		}

    }
    lastChangePower = now_millis

    Calentador_Potencia_UserDisplay.postUpdate(newPower)

end 

rule "update calentador title state"
when
    Item Calentador_Potencia_UserDisplay received update
    or Item Calentador_Termostat_UserDisplay received update
then
    logInfo("Calentador.rules", "Going to update calentador title")
    val termostat = Calentador_Termostat_UserDisplay.state
	if(termostat == "HOT"){
        logInfo("Calentador.rules", "Updating title status to HOT")
        CalentadorTitle.sendCommand("HOT")
    }else{
        logInfo("Calentador.rules", "Updating title status to something different than HOT")
        val powerState = Calentador_Potencia_UserDisplay.state
        if(powerState != NULL){
            logInfo("Calentador.rules", "Updating title status depnding on the power")
            val power = (powerState as Number).intValue
            if(power == 0){
                logInfo("Calentador.rules", "Updating title status to 0 as there is no power")
                CalentadorTitle.sendCommand("OFF")
            }else{
                logInfo("Calentador.rules", "Updating title status to ON"+power)
                CalentadorTitle.sendCommand("ON"+power)
            }
        }else{
            logInfo("Calentador.rules", "Updating title status to UNK, as power state is null")
            CalentadorTitle.sendCommand("UNK")
        }
    }
end

rule "Reset energy today calentador"
when
    Time cron "0 0 0 ? * * *"
then
    Calentador_Energia_Avui.postUpdate(0)
    lastChangePower = -1
end