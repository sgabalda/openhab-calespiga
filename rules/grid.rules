import java.time.ZonedDateTime
import java.time.DayOfWeek
import java.time.temporal.ChronoUnit

rule "Actualitza tarifa xarxa"
when
    Time cron "0 0 * * * * *" //every 1 hour
    or System started
then
    val now = ZonedDateTime::now
    val day = now.getDayOfWeek()
    if((day == DayOfWeek.SATURDAY || day == DayOfWeek.SUNDAY)){
        logDebug("grid", "La hora es vall pq es finde: "+day)
        GridPriceCurrent.postUpdate("vall")
    }else{
        logDebug("grid", "No es finde pq es "+day)
        val currentHour = now.getHour()
        if(currentHour >= 0 && currentHour <= 7){
            logDebug("grid", "La hora es vall: "+currentHour)
            GridPriceCurrent.postUpdate("vall")
        }else if(currentHour >= 10 && currentHour <= 13){
            logDebug("grid", "La hora es punta: "+currentHour)
            GridPriceCurrent.postUpdate("punta")
        }else if(currentHour >= 18 && currentHour <= 21){
            GridPriceCurrent.postUpdate("punta")
            logDebug("grid", "La hora es punta: "+currentHour)
        }else{
            GridPriceCurrent.postUpdate("pla")
            logDebug("grid", "La hora es pla: "+currentHour)
        }
    }
end

rule "Actualitza estat connexio xarxa"
when
    Item GridConnectionStatus changed
then
    val currentStatus = GridConnectionStatus.state
    var current = "off"
    if(currentStatus != NULL){
        current = currentStatus.toString
    }
    logDebug("grid", "L'estat de la connexio es : "+current)
    if(current == "on"){
        GridStatus.postUpdate(ON)
    }else{
        GridStatus.postUpdate(OFF)
    }
end

//Logic for using gird if battery level is low

rule "Activació connexio xarxa per bateria"
when
    Item BatteryLevelToChargeWithGrid changed
    or Item GridPriceToChargeBattery changed
    or Item GridPriceCurrent changed
    or Item BatteryLevelStatus changed
then
    val batteryLeveltoEnable = BatteryLevelToChargeWithGrid.state
    val gridPriceToEnable = GridPriceToChargeBattery.state
    val batteryLevel = BatteryLevelStatus.state
    val gridPrice = GridPriceCurrent.state

    logDebug("grid", "Cal carregar bateria amb xarxa? bat.lev.="+batteryLevel+", tarifa="+gridPrice+
        ", bat.lev.activ="+batteryLeveltoEnable+", tarifa.activ="+gridPriceToEnable)
    var batteryOnLevel = false
    var gridOnPrice = false
    if(batteryLeveltoEnable == "medium"){
        if(batteryLevel == "low" || batteryLevel == "medium"){
            batteryOnLevel = true
        }
    }else if (batteryLeveltoEnable == "low" && batteryLevel == "low"){
        batteryOnLevel = true
    }
    logDebug("grid", "La bateria està al nivell per activar? "+batteryOnLevel)
    if(batteryOnLevel){
        logDebug("grid", "Ja que està per activar segons la bateria, mirem la tarifa")
        if(gridPrice == "vall"){
            logDebug("grid", "Ja que esta a vall, si que hem d'activar")
            gridOnPrice = true
        }else if(gridPrice == "pla"){
            if(gridPriceToEnable == "pla" || gridPriceToEnable == "all"){
                logDebug("grid", "Esta a pla, i per habilitar es "+gridPriceToEnable+", aixi que activem")
                gridOnPrice = true
            }else{
                logDebug("grid", "Esta a pla, i per habilitar es "+gridPriceToEnable+", aixi que NO activem")
                gridOnPrice = false
            }
        }else{
            if(gridPriceToEnable == "all"){
                logDebug("grid", "Esta a punta, i per habilitar es "+gridPriceToEnable+", aixi que activem")
                gridOnPrice = true
            }else{
                logDebug("grid", "Esta a punta, i per habilitar es "+gridPriceToEnable+", aixi que NO activem")
                gridOnPrice = false
            }
        }
        logDebug("grid", "La tarifa està al nivell per activar? "+gridOnPrice)
    }

    if(gridOnPrice && batteryOnLevel){
        logDebug("grid", "Bateria per activar i tarifa per activar. Activem!")
        GridAutomaticBatterySwitch.sendCommand(ON)
    }else{
        logDebug("grid", "Bateria per NO activar o tarifa per NO activar. NO activem!")
        GridAutomaticBatterySwitch.sendCommand(OFF)
    }
end

//NOTE: In case the grid is to be activated (e.g. to load batteries if low, or to heat the water), use a new 
// item and add an OR to enable the grid here.
rule "Activació connexio xarxa"
when
    Item GridManualSwitch changed
    or Item GridAutomaticCarSwitch changed
    or Item GridAutomaticBatterySwitch changed
then
    val manual = GridManualSwitch.state == ON
    val cotxeAutomatic = GridAutomaticCarSwitch.state == ON
    val batteryAutomatic = GridAutomaticBatterySwitch.state == ON
    val encendre = manual || cotxeAutomatic || batteryAutomatic
    
    logDebug("grid", "Els controls per la xarxa son: Manual->"+manual+", CotxeAutomatic->"+cotxeAutomatic+
        ", BateriaAutomatic->"+batteryAutomatic)
    if(encendre){
        logDebug("grid", "Connectant xarxa")
        Ordre_Encesa_Grid_Connection.sendCommand(ON)
        var rao = " "
        if(manual){
            rao = rao + "Manual "
        }
        if(cotxeAutomatic){
            rao = rao + "Cotxe "
        }
        if(batteryAutomatic){
            rao = rao + "Bateria "
        }
        GridReasonOn.postUpdate(rao)
    }else{
        logDebug("grid", "Apagant switch")
        Ordre_Encesa_Grid_Connection.sendCommand(OFF)
        GridReasonOn.postUpdate("Desconnectada")
    }
end

rule "Ordre encesa Grid Connection"
when
    Item Ordre_Encesa_Grid_Connection changed
then
    val novaOrdre = newState
    logDebug("grid", "Ordre Grid Connection received command "+novaOrdre+". Updating intent and sending to executor")
    val now = ZonedDateTime::now
    val nowDateType = new DateTimeType(now) 

    Intent_Canvi_Grid_Connection.postUpdate(nowDateType) 
    logDebug("grid", "Updated Intent_Canvi_Grid_Connection")

    if(novaOrdre == ON){
        Executor_Ordre_Encesa_Grid_Connection.sendCommand(ON)
    }else{
        Executor_Ordre_Encesa_Grid_Connection.sendCommand(OFF)
    }

    logDebug("grid", "Send command to Executor_Ordre_Encesa_Grid_Connection")
end

rule "Executor ordre encesa Grid Connection"
when
    Item Executor_Ordre_Encesa_Grid_Connection received command
then
    val ordre = receivedCommand
    logDebug("grid", "Executor Grid Connection received "+ordre)
    if(ordre == ON){
        GridConnectionSet.sendCommand("start")
    }else{
        GridConnectionSet.sendCommand("stop")
    }
end

rule "Comprova alarma Grid Connection"
when
    Item Comprovador_Alarma_Grid_Connection received command
then
    logDebug("grid", "Checking alarma for Grid connection")
    val minutsItem = AlarmGridConnection_Seconds.state
    var timeForReceivingResponse = 15L
    if(minutsItem != NULL){
        timeForReceivingResponse = (minutsItem as Number).intValue
        logDebug("grid", "setting the time for Grid Connection not in sync alert to "+timeForReceivingResponse+"m") 
    }else{
        AlarmGridConnection_Seconds.sendCommand(15)
        logWarn("grid", "setting the time for Grid Connection not in sync alert to the default "+timeForReceivingResponse+"m") 
    }

    var minutsAgo = timeForReceivingResponse + 1L
    val ultimaConnexioState = Intent_Canvi_Grid_Connection.state
    logDebug("grid", "Ultima ordre sent: "+ultimaConnexioState)
    if(ultimaConnexioState != NULL){
        val lastConnection = (ultimaConnexioState as DateTimeType).getZonedDateTime()
        logDebug("grid", "Ultima ordre sent time is "+lastConnection)
            minutsAgo = ChronoUnit.MINUTES.between(lastConnection, now);
        logDebug("grid", "Ultima ordre sent is "+minutsAgo+"m ago.")
    }else{
        logError("grid", "Can not read Ultima ordre sent (state is "+ultimaConnexioState+
            "), assuming already passed the time.")
    }

    if(minutsAgo > timeForReceivingResponse){
        AlarmGridConnection.postUpdate(ON)
    }
    
end

rule "Comprova canvi encesa Grid Connection"
when
    Time cron "0/15 * * * * * *" //every 15 secs
then
    val ordre = Ordre_Encesa_Grid_Connection.state
    val state = GridStatus.state

    if(state == ON && ordre == ON){
        logDebug("grid", "Checking status of Grid Connection and both are ON")
        //if there was an alert, solve it as now it is in sync
        AlarmGridConnection.postUpdate(OFF)

    }else if(state == OFF && ordre == ON){
        logDebug("grid", "Checking status of Grid Connection and state is OFF and ordre is ON")

        Executor_Ordre_Encesa_Grid_Connection.sendCommand(ON)
        Comprovador_Alarma_Grid_Connection.sendCommand(ON)
        
    }else if(state == OFF && ordre == OFF){
        logDebug("grid", "Checking status of Grid Connection and both are OFF")
        //if there was an alert, solve it as now it is in sync
        AlarmGridConnection.postUpdate(OFF)
    }else if(state == ON && ordre == OFF){
        logDebug("grid", "Checking status of Grid Connection and state is ON and ordre is OFF")
        Executor_Ordre_Encesa_Grid_Connection.sendCommand(OFF)   
        Comprovador_Alarma_Grid_Connection.sendCommand(ON)
    }else{
        logWarn("grid", "Checking status of Grid Connection and some state is null: Ordre-> "+ordre+", State -> "+state)
    }
end

rule "Update icon for xarxa in sitemap"
when
    Item GridStatus changed
then
    if(newState == ON) XarxaBateriaTitle.postUpdate("on")
    else XarxaBateriaTitle.postUpdate("off")
end