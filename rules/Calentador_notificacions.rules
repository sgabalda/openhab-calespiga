import java.util.Date

var lastChangeToHot = 0L

var timeHotToNotify = 60 * 60 * 1000L * 2   // 2hours

rule "Notifica Massa Temps Hot"
when
    Item Calentador_Termostat_UserDisplay received update
then
    val receivedEstat=Calentador_Termostat_UserDisplay.state.toString
    logInfo("HEATER - Calentador_notificacions.rules","Estat calentador updated: "+receivedEstat)
    //If the state is 
    if(receivedEstat == "HOT"){
        var nowmill=(new Date()).time
        logInfo("HEATER - Calentador_notificacions.rules", "Current time is "+nowmill) 
        //if last change to hot is not set, this is the first time it changes
        if(lastChangeToHot == 0){
            lastChangeToHot = nowmill
            logInfo("HEATER - Calentador_notificacions.rules", "Starting to count time HOT") 
        }else{
            //if the last notification was no longer ago than timeBetweenNotifications, don't notify
            if(nowmill - lastChangeToHot > timeHotToNotify){
                logInfo("HEATER - Calentador_notificacions.rules", "Time HOT is not yet enough to send notification")
            }else{
                //sendBroadcastNotification("Calentador està HOT durant molt de temps. Potser està el termostat tancat?") 
                logInfo("HEATER - Calentador_notificacions.rules", "Send the notification") 
                lastChangeToHot = nowmill  //reset it so the notification will be sent again
            }
            logInfo("temperatura_fv_perill.rules", "HEATER - NO Enviant notificació de temperatura perillosa, ja que fa "+(nowmill - lastNotificationBat)+"ms") 
        }
    }else{
        logInfo("HEATER - Calentador_notificacions.rules", "State is not hot, resetting the timer") 
        lastChangeToHot = 0
    }
end