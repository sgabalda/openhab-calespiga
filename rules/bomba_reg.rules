import java.time.ZonedDateTime
import java.time.temporal.ChronoUnit
import java.lang.Math

//RULES MANAGING Reg from DIPOSIT

rule "Ordre encesa bomba diposit"
when
    Item Ordre_Encesa_Bomba_Diposit changed
then
    val novaOrdre = newState
    logDebug("BombaReg", "Ordre diposit received command "+novaOrdre+". Updating intent and sending to executor")
    val now = ZonedDateTime::now
    val nowDateType = new DateTimeType(now) 

    Intent_Canvi_Bomba_Diposit.postUpdate(nowDateType) 
    logDebug("BombaReg", "Updated Intent_Canvi_Bomba_Diposit")

    if(novaOrdre == ON){
        Executor_Ordre_Encesa_Bomba_Diposit.sendCommand(ON)
        Ordre_Encesa_Bomba_Bassa.sendCommand(OFF)
    }else{
        Executor_Ordre_Encesa_Bomba_Diposit.sendCommand(OFF)
    }

    logDebug("BombaReg", "Send command to Executor_Ordre_Encesa_Bomba_Diposit")
end

rule "Executor ordre encesa bomba diposit"
when
    Item Executor_Ordre_Encesa_Bomba_Diposit received command
then
    val ordre = receivedCommand
    logDebug("BombaReg", "Executor Diposit received "+ordre)
    if(ordre == ON){
        logDebug("BombaReg", "Trying to get ownership of the circulacio bassa")
        //try to get ownership of the BassaCirculacioChangeRequest
        BassaCirculacioChangeRequest.sendCommand(""+Circulacio_Leader_Bomba_Diposit_Reg.name+",off")
    }else{
        //release the BassaCirculacioChangeOwner
        logDebug("BombaReg", "Releasing ownership of the circulacio bassa")
        BassaCirculacioChangeRequest.sendCommand(""+Circulacio_Leader_Bomba_Diposit_Reg.name+",")
        //and stop the pump
        logDebug("BombaReg", "Stopping diposit pump")
        DipositPumpSet.sendCommand("stop")    
    }

end

rule "Ownership obtingut"
when
    Item Circulacio_Leader_Bomba_Diposit_Reg received command 
then
    val ordre = receivedCommand
    if(ordre == "off"){
        logDebug("BombaReg", "Ownership of circulacio ours, going to check if watering can start")
        //comprova que bassa no esta ences
        var bombaBassaStatus = "on"
        val bombaBassaStatusItem = BassaRegStatus.state
        if(bombaBassaStatusItem != NULL){
            bombaBassaStatus = bombaBassaStatusItem.toString
        }
        if(bombaBassaStatus == "on"){
            //if it is, then do nothing as it will be retried by the checker
            logWarn("BombaReg", "Bomba bassa is ON, waiting to turn on bomba diposit")
        }else{

            logDebug("BombaReg", "Bomba bassa is OFF, checking circulacio")
            //comprova si status bassa es diposit
            var bassaStatus = "off"
            val bassaStatusItem = BassaCirculacioStatus.state
            if(bassaStatusItem != NULL){
                bassaStatus = bassaStatusItem.toString
            }
            //if it is not, send command to start the pump
            if(bassaStatus == "off" || bassaStatus == "depuradora" ){
                logDebug("BombaReg", "bassa is not diposit or transitioning, so turning on bomba ")
                DipositPumpSet.sendCommand("start")    
            }else{
                logDebug("BombaReg", "bassa is in diposit state, so waiting")
            }
            //if not, then do nothing as it will be retried by the checker
        }
    }else{
        logDebug("BombaReg", "Ownership of circulacio not ours, not doing anything")
    }
end

rule "Encesa diposit ha succeit"
when
    Item DipositPumpStatus changed 
then
    val nouEstat = newState
    //check the change is when the status for circulacio is the one we require
    var statusCirculacio = "off"
    val statusItem = BassaCirculacioStatus.state
    if(statusItem != NULL){
        statusCirculacio = statusItem.toString
    }
    if(statusCirculacio == "off"){
        logDebug("BombaReg", "Diposit changed to "+nouEstat+". Updating darrer canvi")
        val now = ZonedDateTime::now
        val nowDateType = new DateTimeType(now) 

        Darrer_Canvi_Bomba_Diposit.postUpdate(nowDateType)
        if(nouEstat == "on"){
            Estat_Bomba_Diposit.sendCommand(ON)
        }else{
            Estat_Bomba_Diposit.sendCommand(OFF)
        }
    }else{
        logDebug("BombaReg", "Diposit changed to "+nouEstat+
        " but status for bassa is "+
        statusCirculacio+" which means we are not the owners, so not doing anything")
    }
end

rule "Comprova alarma bomba diposit"
when
    Item Comprovador_Alarma_Bomba_Diposit received command
then
    logDebug("BombaReg", "Checking alarma for diposit")
    val minutsItem = AlarmReg_Seconds.state
    var timeForReceivingResponse = 15L
    if(minutsItem != NULL){
        timeForReceivingResponse = (minutsItem as Number).intValue
        logDebug("BombaReg", "setting the time for diposit reg not in sync alert to "+timeForReceivingResponse+"s") 
    }else{
        AlarmReg_Seconds.sendCommand(15)
        logWarn("BombaReg", "setting the time for diposit reg not in sync alert to the default "+timeForReceivingResponse+"s") 
    }

    var minutsAgo = timeForReceivingResponse + 1L
    val ultimaConnexioState = Intent_Canvi_Bomba_Diposit.state
    logDebug("BombaReg", "Ultima ordre sent: "+ultimaConnexioState)
    if(ultimaConnexioState != NULL){
        val lastConnection = (ultimaConnexioState as DateTimeType).getZonedDateTime()
        logDebug("BombaReg", "Ultima ordre sent time is "+lastConnection)
            minutsAgo = ChronoUnit.SECONDS.between(lastConnection, now);
        logDebug("BombaReg", "Ultima ordre sent is "+minutsAgo+"m ago.")
    }else{
        logError("BombaReg", "Can not read Ultima ordre sent (state is "+ultimaConnexioState+
            "), assuming already passed the time.")
    }

    if(minutsAgo > timeForReceivingResponse){
        AlarmReg.postUpdate(ON)
    }
end

rule "Comprova canvi encesa bomba diposit"
when
    Time cron "0/15 * * * * * *" //every 15 secs
then
    val ordre = Ordre_Encesa_Bomba_Diposit.state
    val stateBomba = Estat_Bomba_Diposit.state
    val stateReg = EstatReg.state
    val stateRegDipositOn = stateBomba == ON && stateReg == ON

    logDebug("BombaReg", "The current status of reg diposit is: Ordre-> "+ordre+", State -> Bomba:"+stateBomba+", Reg:"+stateReg)

    if(stateRegDipositOn && ordre == ON){
        logDebug("BombaReg", "Checking status of reg diposit and both are ON")
        //if there was an alert, solve it as now it is in sync
        AlarmReg.postUpdate(OFF)

        var minutesToRun = 0L
        val minutesToRunState = Durada_Reg_Router.state
        if(minutesToRunState != NULL){
            minutesToRun = (minutesToRunState as Number).longValue
        }else{
            logError("BombaReg","Durada_Reg_Router is null, assuming 0 so reg will stop now")
        }
        var minutesAgo = minutesToRun + 1L
        val now = ZonedDateTime::now
        val intentEncesa = Darrer_Canvi_Bomba_Diposit.state
        logDebug("BombaReg", "Darrer_Canvi_Bomba_Diposit obtained: "+intentEncesa)
        if(intentEncesa != NULL){
            val intent = (intentEncesa as DateTimeType).getZonedDateTime()
            logDebug("BombaReg", "Darrer_Canvi_Bomba_Diposit time is "+intent)
                minutesAgo = ChronoUnit.MINUTES.between(intent, now);
            logDebug("BombaReg", "Darrer_Canvi_Bomba_Diposit time is "+minutesAgo+"s ago.")
        }else{
            logError("BombaReg", "Can not read Darrer_Canvi_Bomba_Diposit (state is "+intentEncesa+
            "), assuming already passed the time.")
        }
        if(minutesAgo >= minutesToRun){
            logDebug("BombaReg", "Intent encesa bomba diposit time is "+minutesAgo+"m ago, and limit is "+
                minutesToRun+"m so truning off")
            Encesa_Bomba_Manual.sendCommand(OFF) 
        }else{
            logDebug("BombaReg", "Intent encesa bomba diposit time is "+minutesAgo+"m ago, and limit is "+
                minutesToRun+"m so not changing anything")
        }
    }else if(!stateRegDipositOn && ordre == ON){
        logDebug("BombaReg", "Checking status of reg diposit and state is OFF and ordre is ON")

        Executor_Ordre_Encesa_Bomba_Diposit.sendCommand(ON)

        //In any case, check the Alarm is not to be triggered, the value sent does not matter
        Comprovador_Alarma_Bomba_Diposit.sendCommand(ON)
        
    }else if(!stateRegDipositOn && ordre == OFF){
        logDebug("BombaReg", "Checking status of reg diposit and both are OFF")
        //if there was an alert, solve it as now it is in sync
        AlarmReg.postUpdate(OFF)
    }else if(stateRegDipositOn && ordre == OFF){
        logDebug("BombaReg", "Checking status of reg Diposit and state is ON and ordre is OFF")
        Executor_Ordre_Encesa_Bomba_Diposit.sendCommand(OFF)    //when it is run via MQTT, change here to send the message to command topic

        //In any case, check the Alarm is not to be triggered, the value sent does not matter
        Comprovador_Alarma_Bomba_Diposit.sendCommand(ON)
    }else{
        logWarn("BombaReg", "Checking status of reg Diposit and some state is null: Ordre-> "+ordre+", State -> Bomba:"+stateBomba+", Reg:"+stateReg)
    }
end


//RULES MANAGING Reg from BASSA

rule "Ordre encesa bomba Bassa"
when
    Item Ordre_Encesa_Bomba_Bassa changed
then
    val novaOrdre = newState
    logDebug("BombaReg", "Ordre Bassa received command "+novaOrdre+". Updating intent and sending to executor")
    val now = ZonedDateTime::now
    val nowDateType = new DateTimeType(now) 

    Intent_Canvi_Bomba_Bassa.postUpdate(nowDateType) 

    if(novaOrdre == ON){
        Executor_Ordre_Encesa_Bomba_Bassa.sendCommand(ON)
        Ordre_Encesa_Bomba_Diposit.sendCommand(OFF)
    }else{
        Executor_Ordre_Encesa_Bomba_Bassa.sendCommand(OFF)
    }
end

rule "Executor ordre encesa bomba Bassa"
when
    Item Executor_Ordre_Encesa_Bomba_Bassa received command
then
    val ordre = receivedCommand
    logDebug("BombaReg", "Executor Bassa received "+ordre)
    if(ordre == ON){
        //comprova que diposit no esta ences
        var bombaDipositStatus = "on"
        val bombaDipositStatusItem = DipositPumpStatus.state
        if(bombaDipositStatusItem != NULL){
            bombaDipositStatus = bombaDipositStatusItem.toString
        }
        if(bombaDipositStatus == "on"){
            //if it is, then do nothing as it will be retried by the checker
            logWarn("BombaReg", "Bomba diposit is ON, waiting to turn on bomba bassa")
        }else{
            logDebug("BombaReg", "Bomba diposit is OFF, turning ON bomba bassa")
            BassaRegProxy.sendCommand("start")
        }
    }else{
        BassaRegProxy.sendCommand("stop")
    }
    
end

rule "Encesa Bassa ha succeit"
when
    Item BassaRegStatus changed
then
    val nouEstat = newState
    logDebug("BombaReg", "Bassa changed to "+nouEstat+". Updating darrer canvi")
    val now = ZonedDateTime::now
    val nowDateType = new DateTimeType(now) 

    Darrer_Canvi_Bomba_Bassa.postUpdate(nowDateType)
    if(nouEstat == "on"){
        Estat_Bomba_Bassa.sendCommand(ON)
        logDebug("BombaReg", "Bassa estat set to ON")
    }else{
        Estat_Bomba_Bassa.sendCommand(OFF)
        logDebug("BombaReg", "Bassa estat set to OFF")
    }
end

rule "Comprova alarma bomba Bassa"
when
    Item Comprovador_Alarma_Bomba_Bassa received command
then
    logDebug("BombaReg", "Checking alarma for Bassa")
    val minutsItem = AlarmReg_Seconds.state
    var timeForReceivingResponse = 15L
    if(minutsItem != NULL){
        timeForReceivingResponse = (minutsItem as Number).intValue
        logDebug("BombaReg", "setting the time for Bassa reg not in sync alert to "+timeForReceivingResponse+"s") 
    }else{
        AlarmReg_Seconds.sendCommand(15)
        logWarn("BombaReg", "setting the time for Bassa reg not in sync alert to the default "+timeForReceivingResponse+"s") 
    }

    var minutsAgo = timeForReceivingResponse + 1L
    val ultimaConnexioState = Intent_Canvi_Bomba_Bassa.state
    logDebug("BombaReg", "Ultima ordre sent: "+ultimaConnexioState)
    if(ultimaConnexioState != NULL){
        val lastConnection = (ultimaConnexioState as DateTimeType).getZonedDateTime()
        logDebug("BombaReg", "Ultima ordre sent time is "+lastConnection)
        minutsAgo = ChronoUnit.SECONDS.between(lastConnection, now);
        logDebug("BombaReg", "Ultima ordre sent is "+minutsAgo+"m ago.")
    }else{
        logError("BombaReg", "Can not read Ultima ordre sent (state is "+ultimaConnexioState+
            "), assuming already passed the time.")
    }

    if(minutsAgo > timeForReceivingResponse){
        AlarmReg.postUpdate(ON)
    }
end

rule "Comprova canvi encesa bomba Bassa"
when
    Time cron "0/15 * * * * * *" //every 15 secs
then
    val ordre = Ordre_Encesa_Bomba_Bassa.state
    val state = Estat_Bomba_Bassa.state

    if(state == ON && ordre == ON){
        logDebug("BombaReg", "Checking status of reg Bassa and both are ON")
        //if there was an alert, solve it as now it is in sync
        AlarmReg.postUpdate(OFF)

        var minutesToRun = 0L
        val minutesToRunState = Durada_Reg_Router.state
        if(minutesToRunState != NULL){
            minutesToRun = (minutesToRunState as Number).longValue
        }else{
            logError("BombaReg","Durada_Reg_Router is null, assuming 0 so reg will stop now")
        }
        var minutesAgo = minutesToRun + 1L
        val now = ZonedDateTime::now
        val intentEncesa = Darrer_Canvi_Bomba_Bassa.state
        logDebug("BombaReg", "Darrer_Canvi_Bomba_Bassa obtained: "+intentEncesa)
        if(intentEncesa != NULL){
            val intent = (intentEncesa as DateTimeType).getZonedDateTime()
            logDebug("BombaReg", "Darrer_Canvi_Bomba_Bassa time is "+intent)
            minutesAgo = ChronoUnit.MINUTES.between(intent, now);
            logDebug("BombaReg", "Darrer_Canvi_Bomba_Bassa time is "+minutesAgo+"s ago.")
        }else{
            logError("BombaReg", "Can not read Darrer_Canvi_Bomba_Bassa (state is "+intentEncesa+
                "), assuming already passed the time.")
        }

        if(minutesAgo >= minutesToRun){
            logDebug("BombaReg", "Intent encesa bomba Bassa time is "+minutesAgo+"m ago, and limit is "+
                minutesToRun+"m so truning off")
            Encesa_Bomba_Manual.sendCommand(OFF) 
        }else{
            logDebug("BombaReg", "Intent encesa bomba Bassa time is "+minutesAgo+"m ago, and limit is "+
                minutesToRun+"m so not changing anything")
        }
    }else if(state == OFF && ordre == ON){
        logDebug("BombaReg", "Checking status of reg Bassa and state is OFF and ordre is ON")
        Executor_Ordre_Encesa_Bomba_Bassa.sendCommand(ON)
        Comprovador_Alarma_Bomba_Bassa.sendCommand(ON)
        
    }else if(state == OFF && ordre == OFF){
        logDebug("BombaReg", "Checking status of reg Bassa and both are OFF")
        //if there was an alert, solve it as now it is in sync
        AlarmReg.postUpdate(OFF)
    }else if(state == ON && ordre == OFF){
        logDebug("BombaReg", "Checking status of reg Bassa and state is ON and ordre is OFF")
        Executor_Ordre_Encesa_Bomba_Bassa.sendCommand(OFF)
        Comprovador_Alarma_Bomba_Bassa.sendCommand(ON)
    }else{
        logWarn("BombaReg", "Checking status of reg Bassa and some state is null: Ordre-> "+ordre+", State -> "+state)
        //In any case, check the Alarm is not to be triggered, the value sent does not matter
        Comprovador_Alarma_Bomba_Bassa.sendCommand(ON)
    }
end

// General rules for REG

rule "estat reg"
when
    Item Estat_Bomba_Bassa changed or
    Item Estat_Bomba_Diposit changed or
    Item BassaCirculacioStatus changed
then
    val stateBombaBassa = Estat_Bomba_Bassa.state
    val stateBombaDiposit = Estat_Bomba_Diposit.state
    var bassaStatus = "circulacio"
    val bassaStatusItem = BassaCirculacioStatus.state
    if(bassaStatusItem != NULL){
        bassaStatus = bassaStatusItem.toString
    }

    if(stateBombaBassa == ON){
        EstatReg.postUpdate("on")
    }else if( stateBombaDiposit == ON && bassaStatus != "diposit"){
        //the pump is ON and we are not filling in the bassa
        EstatReg.postUpdate("on")
    }else{
        EstatReg.postUpdate("off")
    }
end

rule "Decsio encesa bomba reg"
when
    Item Encesa_Reg_Router received command
then
    val minutesToRun = (receivedCommand as Number).longValue

    Durada_Reg_Router.sendCommand(minutesToRun)

    if(minutesToRun == 0L){
        logDebug("BombaReg","In router, minutes to run is 0 so switching both pumps off")
        Ordre_Encesa_Bomba_Bassa.sendCommand(OFF)
        Ordre_Encesa_Bomba_Diposit.sendCommand(OFF)
    }else{
        val bombaToUse = Bomba_Activa.state
        var bombaToUseString = "diposit"
        if(bombaToUse != NULL){
            bombaToUseString = bombaToUse.toString
        }
        logDebug("BombaReg","In router, the pump to use is "+bombaToUseString+" for "+minutesToRun+" min")
        if(bombaToUseString == "diposit"){
            Ordre_Encesa_Bomba_Bassa.sendCommand(OFF)
            Ordre_Encesa_Bomba_Diposit.sendCommand(ON)
        }else{
            Ordre_Encesa_Bomba_Bassa.sendCommand(ON)
            Ordre_Encesa_Bomba_Diposit.sendCommand(OFF)
        }
    }
    
end

rule "Encesa manual bomba reg"
when
    Item Encesa_Bomba_Manual received command ON
then
    logInfo("BombaReg","Manually turning on bomba reg")
    val minutesToRunState = Durada_Encesa_Manual.state
    var minutesToRun = 0
    if(minutesToRunState != NULL){
        minutesToRun = (minutesToRunState as Number).intValue
    }
    Encesa_Reg_Router.sendCommand(minutesToRun)
end

rule "Apagada manual bomba reg"
when
    Item Encesa_Bomba_Manual received command OFF
then
    logInfo("BombaReg","Bomba manually turned off")
    Encesa_Reg_Router.sendCommand(0)
    logDebug("BombaReg","Done turning off")
end

rule "Encesa auto bomba reg"
when
    Time cron "0 2 * * * ?" //every hour (when 2 minutes have passed)
    //the code below does water more than once if the rule is triggered more than one in
    //the same hour, so be careful whan changing the cron pattern
then
    var minutesToRun = 0
    val minutesToRunState = Durada_Encesa_Auto.state
    if(minutesToRunState != NULL){
        minutesToRun = (minutesToRunState as Number).intValue
    }
    logDebug("BombaReg","Got minutes as "+minutesToRun)

    val enabled = Encesa_Bomba_Auto.state==ON
    logDebug("BombaReg","The auto bomba is enabled? "+ enabled)

    var period = 0
    val periodState = Periode_Encesa_Auto.state
    if(periodState != NULL){
        period = (periodState as Number).intValue
    }
    logDebug("BombaReg","Got period as "+period)

    var scheduledHour = 0
    val scheduledHourState = Hora_Encesa_Auto.state
    if(scheduledHourState != NULL){
        scheduledHour = (scheduledHourState as Number).intValue
    }
    logDebug("BombaReg","Got scheduledHour as "+scheduledHour)

    if(enabled && minutesToRun>0 && period > 0){
        val now = ZonedDateTime::now
        val nowDateType = new DateTimeType(now)

        val currentHour = now.getHour()
        logDebug("BombaReg","currentHour is "+currentHour)

        var daysAgo = 0L
        val lastRegItemState = Darrera_Encesa_Reg.state
        logDebug("BombaReg", "Last reg item state is "+lastRegItemState)
        if(lastRegItemState != NULL){
            logDebug("BombaReg", "Going to convert last reg time")
            val lastReg = (lastRegItemState as DateTimeType).getZonedDateTime()
            logDebug("BombaReg", "Last reg time is "+lastReg)
            daysAgo = ChronoUnit.DAYS.between(lastReg, now);
        }
        logDebug("BombaReg", "daysAgo is "+daysAgo)

        val shouldWater = (24 * daysAgo + Math.abs(currentHour - scheduledHour)) % period == 0
        logDebug("BombaReg", "shouldWater is "+shouldWater)
        
        if(shouldWater){
            Encesa_Reg_Router.sendCommand(minutesToRun)
            Darrera_Encesa_Reg.postUpdate(nowDateType)
        }

    }else{
        logDebug("BombaReg","The auto bomba is not active, minutes are 0 or period is 0, not checking last run")
    }

end

rule "update reg title state"
when
    Item DipositPercentNumber received update
then
    val current = DipositPercentNumber.state.toString
    //logInfo("BombaReg", "Going to update reg title to "+current)
    RegTitle.sendCommand(current)
end