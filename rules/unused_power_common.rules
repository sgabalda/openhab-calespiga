import org.openhab.core.model.script.ScriptServiceUtil
import java.util.HashMap
import java.util.List

var test = false     //set to true to use test mode (unused power will not be read from Sunny boy

var finishedRetries = 0
val MAX_FINISHED_RETRIES = 5
var currentItemUpdated = 0
var devices = "".split(",")

rule "Default boot values"
when
	System started
then
	AvailablePower.sendCommand(0)
	AvailablePowerProcessStatus.postUpdate("finished")
	NotUsedPower.postUpdate(0)
    
    logDebug("UnusedPower","Starting boot values")

    UnusedPowerPriorityRefreshProxy.sendCommand("go")
    
end

rule "Change priorities"
when
    Member of UnusedPowerPriority received command
then
    logDebug("UnusedPower","Changed priorities of unused power")
    val priorityItem = triggeringItem
    
    logDebug("UnusedPower","Going to get current priority")
    var priorityPreviousState = 0
    val itemName = ""+priorityItem.name
    val splitted = itemName.split("_")
    if(splitted.length < 2){
        logError("UnusedPower","item of UnusedPowerPriority has not valid prority item name: "+itemName)
    }else{
        val deviceName = splitted.get(0)
        logDebug("UnusedPower","Device name is "+deviceName)
        val devices = DestinationDevices.state.toString.split(',')
        var i = devices.length() - 1
        while(i >= 0){
            val currentDevice = devices.get(i)
            logDebug("UnusedPower","In position "+i+" is device "+currentDevice)
            if(currentDevice == deviceName){
                logDebug("UnusedPower","Device found in position "+ (i+1))
                priorityPreviousState = i + 1
            }
            i = i-1
        }
    }

    logDebug("UnusedPower","Previous state obtained")
    val priorityNextState = receivedCommand
    logDebug("UnusedPower","New state obtained")

    logDebug("UnusedPower","Priority item "+priorityItem.name+" changed from "+priorityPreviousState+" to "+priorityNextState)

    if(priorityNextState != NULL){
        logDebug("UnusedPower","Next state is not null")
        val priorityNumberNext = (priorityNextState as Number).intValue
        logDebug("UnusedPower","Getting item with current priority "+priorityNumberNext)
        UnusedPowerPriority.members.forEach[ item | {
            logDebug("UnusedPower","Checking item "+item.name)
            val state = item.state
            if(state != NULL){
                logDebug("UnusedPower","Item has not null state "+item.name)
                val priorityItemNumber = (state as Number).intValue
                logDebug("UnusedPower","Item priority is "+priorityItemNumber)
                if((""+item.name) == itemName){
                   logDebug("UnusedPower","Found the same item, ignoring") 
                }
                else if(priorityItemNumber == priorityNumberNext){
                    logDebug("UnusedPower","Item priority is the same! Changing to old value ")
                    if(priorityPreviousState ==0){
                        logDebug("UnusedPower","As there was no previous state, stting it to NULL ")
                        item.postUpdate(NULL)
                    }else{
                        logDebug("UnusedPower","Setting it to previous state "+priorityPreviousState)
                        item.postUpdate(priorityPreviousState)
                    }
                    
                }else{
                    logDebug("UnusedPower","Item priority is NOT the same")
                }
            }else{
                logDebug("UnusedPower","Item priority is NULL")
            }
        }]
    }
    UnusedPowerPriorityRefreshProxy.postUpdate("go")
end

rule "Refresh destination devices"
when
    Item UnusedPowerPriorityRefreshProxy received update
then
    logDebug("UnusedPower","Starting values get")

    var validItemNames = 0
    val HashMap<Integer,String> configuredPriorities= newHashMap()
    val List<String> nonConfiguredPriorities = newArrayList()
    var destinationsString = ""

    UnusedPowerPriority.members.forEach[ item | {
        val itemName = ""+item.name
        val splitted = itemName.split("_")
        if(splitted.length < 2){
            logError("UnusedPower","items of UnusedPowerPriority has not valid prority item name: "+itemName)
        }else{
            validItemNames = validItemNames + 1
        }
    }]
    logDebug("UnusedPower","Looping all items of UnusedPowerPriority")
    //get all items in the group for priority
    UnusedPowerPriority.members.forEach[ item | {
        val state = item.state
        val itemName = ""+item.name
        val splitted = itemName.split("_")
        if(splitted.length < 2){
            logError("UnusedPower","items of UnusedPowerPriority has not valid prority item name: "+itemName)
        }else{
            val deviceName = splitted.get(0)
            if(state == NULL){
                logWarn("UnusedPower","Device "+deviceName+" has not configured priority")
                nonConfiguredPriorities.add(deviceName)
            }else{
                val priorityNumber = (state as Number).intValue
                if(priorityNumber > validItemNames || priorityNumber < 1){
                    logError("UnusedPower","Invalid item priority: "+priorityNumber+" because there are "+validItemNames+" valid items for devices")
                    nonConfiguredPriorities.add(deviceName)
                }else if(configuredPriorities.containsKey(priorityNumber)){
                    logError("UnusedPower","Duplicated item priority: "+priorityNumber+" for device "+deviceName+", has the same as "+configuredPriorities.get(priorityNumber))
                    nonConfiguredPriorities.add(deviceName)
                }else{
                    logDebug("UnusedPower","Device "+deviceName+" intially has set priority "+priorityNumber)
                    configuredPriorities.put(priorityNumber,deviceName)
                }
            }
        }
    } ]

	logDebug("UnusedPower","Going to calcuate destination string")

	var listIndex = 0
    var loopIndex = 0
    while(loopIndex<validItemNames){
        if(loopIndex != 0){
            destinationsString = destinationsString + ","
        }
        val currentPriority = loopIndex+1
        if(configuredPriorities.containsKey(currentPriority)){
            val deviceForPriority = configuredPriorities.get(currentPriority)
            logDebug("UnusedPower","device for priority "+currentPriority+ " configured is "+deviceForPriority)
            destinationsString = destinationsString + deviceForPriority
        }else{
            val deviceForPriority = nonConfiguredPriorities.get(listIndex)
            logWarn("UnusedPower","device for priority "+currentPriority+ "is not configured. Taking "+deviceForPriority)
            destinationsString = destinationsString + deviceForPriority
            listIndex = listIndex + 1
        }
        loopIndex = loopIndex + 1
    }
    logDebug("UnusedPower","The starting destination devices are "+destinationsString)
	DestinationDevices.sendCommand(destinationsString)
end

rule "update extra power"
when
	Item SunnyBoy_Pot_Rebutjada changed
	or Time cron "15 * * ? * * *"
then
	val unusedPower = (SunnyBoy_Pot_Rebutjada.state as Number).intValue
	if(!test){
	    NotUsedPower.postUpdate(unusedPower)
    }
end

rule "manage not used power"
when
    Time cron "0/30 * * ? * * *"     //"0/30 * 6-22 ? * * *"
then
    val engineStatus = AvailablePowerProcessStatus.state
    logInfo("UnusedPower","The current destination devices are "+ DestinationDevices.state)
    devices = DestinationDevices.state.toString.split(',')
	if(engineStatus == "finished"){
		logInfo("UnusedPower","Not used power engine is currently finished, starting a new one")
	    val unusedPower = (NotUsedPower.state as Number).intValue
		if(devices.length() > 0){
			logInfo("UnusedPower","There are devices, starting")

			var availablePower = unusedPower
			var forgetLastUsedPower = false
			if(availablePower<=0){
			    forgetLastUsedPower = true
			}

            var i = devices.length() - 1
            while(i >= 0){
                logInfo("UnusedPower","Getting used power by device "+devices.get(i))
                val currentItem = ScriptServiceUtil.getItemRegistry.getItem(devices.get(i) + "_UsedPower")
                logInfo("UnusedPower","Got the current item used power (forget next is "+forgetLastUsedPower+")")
                if(currentItem != null && currentItem.state != NULL){
                    val unusedByDevice = (currentItem.state as Number).intValue
                    if(unusedByDevice == 0){
                        logInfo("UnusedPower","Unused power for "+devices.get(i)+" is 0, not adding it: "+currentItem.state)
                    }else if(forgetLastUsedPower){
                        forgetLastUsedPower = false
                        logInfo("UnusedPower","Unused power for "+devices.get(i)+" will be ignored: "+currentItem.state)
                    }else{
                        logInfo("UnusedPower","Unused power added to available power: "+currentItem.state)
                        availablePower = availablePower + (currentItem.state as Number).intValue
                    }
                }
                logInfo("UnusedPower","Available power is after checking device "+devices.get(i)+": "+availablePower)
                i = i - 1
            }

			logInfo("UnusedPower","Currently unused power is "+unusedPower+", available power is "+availablePower)

			AvailablePower.postUpdate(availablePower)
			logInfo("UnusedPower","Updated available power")
			//set status as started and update all devices available power in order
			AvailablePowerProcessStatus.postUpdate("started")
			logInfo("UnusedPower","Sending available power to 1st device "+devices.get(0))
			val firstItemAvailable = ScriptServiceUtil.getItemRegistry.getItem(devices.get(0) + "_AvailablePower")
			currentItemUpdated = 0
			firstItemAvailable.sendCommand(availablePower)
		}else{
			logWarn("UnusedPower","There are no devices?! ")
		}
    }else{

    	finishedRetries = finishedRetries + 1
    	logWarn("UnusedPower","Going to manage the unused power,but the engine is not finished. For "+finishedRetries+ " times")
    	if(finishedRetries > MAX_FINISHED_RETRIES){
    		sendBroadcastNotification("La gestió de la potencia sobrant s'ha encallat. Intentarem resetejar però potser alguna cosa no funciona")

    		var i = 0
    		while(i<devices.length()){
    			val currentItem = ScriptServiceUtil.getItemRegistry.getItem(devices.get(i) + "_RequiredPower")
    			currentItem.sendCommand(0)
    			i = i + 1
    		}
    		currentItemUpdated = devices.length() - 1
    		DestinationDeviceApplied.sendCommand(0)
    	}
    }

end

rule "Destination Device Updated"
when
	Item DestinationDeviceUpdated received command
then
    logInfo("UnusedPower","DestinationDeviceUpdated received command, current item is "+devices.get(currentItemUpdated))
    val nextItem = currentItemUpdated + 1
    if(nextItem >= devices.length()){
        logInfo("UnusedPower","DestinationDeviceUpdated received command, all devices ready to apply changes")
        currentItemUpdated = devices.length() - 1
        logInfo("UnusedPower","Applying changes to last device "+devices.get(currentItemUpdated))
        val nextItemToApply = ScriptServiceUtil.getItemRegistry.getItem(devices.get(currentItemUpdated) + "_ApplyChange")
        nextItemToApply.sendCommand("apply")
        logInfo("UnusedPower","Sent command to apply to "+devices.get(currentItemUpdated))
    }else{
        logInfo("UnusedPower","DestinationDeviceUpdated received command, next device is "+ devices.get(nextItem))
        val previousAvailablePowerItem = ScriptServiceUtil.getItemRegistry.getItem(devices.get(currentItemUpdated) + "_AvailablePower")
        val previousAvailablePower = (previousAvailablePowerItem.state as Number).intValue
        val previousRequiredPowerItem = ScriptServiceUtil.getItemRegistry.getItem(devices.get(currentItemUpdated) + "_RequiredPower")
        val previousRequiredPower = (previousRequiredPowerItem.state as Number).intValue

        var availablePower = 0
        if(previousAvailablePower > previousRequiredPower){
            availablePower = previousAvailablePower - previousRequiredPower
        }
        logInfo("UnusedPower","Available power for " + devices.get(nextItem)+" is " + availablePower)
        val nextItemAvailable = ScriptServiceUtil.getItemRegistry.getItem(devices.get(nextItem) + "_AvailablePower")
        currentItemUpdated = nextItem
        nextItemAvailable.sendCommand(availablePower)
    }
end

rule "Destination Device Apply"
when
	Item DestinationDeviceApplied received command
then
    val nextItem = currentItemUpdated - 1
    if(nextItem >= 0){
        currentItemUpdated = nextItem
        logInfo("UnusedPower","Applying changes to device "+devices.get(currentItemUpdated))
        val nextItemToApply = ScriptServiceUtil.getItemRegistry.getItem(devices.get(currentItemUpdated) + "_ApplyChange")
        nextItemToApply.sendCommand("apply")
        logInfo("UnusedPower","Sent command to apply to "+devices.get(currentItemUpdated))
    }else{
        logInfo("UnusedPower","Done applying changes to all devices, finishing management of unused power cycle")
        AvailablePowerProcessStatus.postUpdate("finished")
        currentItemUpdated = 0
    }
end