import java.time.ZonedDateTime
import java.time.temporal.ChronoUnit

var long lastChangePower = -1

val USED_POWER = 80.0

var String circulacioOwner = ""

rule "forward proxy values"
when Item BassaRegProxy changed
    or Item BassaAiguagrisaProxy changed
    or Item BassaCirculacioProxy changed
    or Time cron "0/15 * * * * * *" //every 15 secs
then
    val commandGrisa = BassaAiguagrisaProxy.state.toString
    val commandReg = BassaRegProxy.state.toString
    val commandCirculacio = BassaCirculacioProxy.state.toString

    logDebug("bassa.rules","Forwarding proxy values to command items: Reg: "+commandReg+
        ", Circulacio: "+commandCirculacio+", Aigua grisa: "+commandGrisa)
    BassaAiguagrisaCommand.sendCommand(commandGrisa)
    BassaRegCommand.sendCommand(commandReg)
    BassaCirculacioCommand.sendCommand(commandCirculacio)
end

rule "update last connexion from MQTT Bassa"
when
    Item BassaPercentNumber received update
then
    val now = ZonedDateTime::now
    val nowDateType = new DateTimeType(now) 
    logDebug("bassa.rules", "Received comm from Bassa "+now)
    //update last connection
    BassaUltimaConnexio.postUpdate(nowDateType)
    BassaStatusConnexio.sendCommand("Online")
    AlarmBassaComunicacio.postUpdate(OFF)
end

rule "update last connexion from MQTT AiguaGrisa"
when
    Item BassaAiguagrisaStatus received update
then
    val now = ZonedDateTime::now
    val nowDateType = new DateTimeType(now) 
    logDebug("bassa.rules", "Received comm from Aigua grisa "+now)
    //update last connection
    BassaAiguaGrisaUltimaConnexio.postUpdate(nowDateType)
    BassaAiguaGrisaStatusConnexio.sendCommand("Online")
    AlarmBassaComunicacio.postUpdate(OFF)
end

rule "Comprova last connexiÃ³ bassa"
when 
    Time cron "0/30 * * * * * *" //every 30 secs
then
    logDebug("bassa.rules", "Checking bassa connection")
    val now = ZonedDateTime::now
    logDebug("bassa.rules", "current date is "+now)

    val secondsItem = AlarmBassaComunicacio_Seconds.state
    var timeForReceivingResponse = 60L
    if(secondsItem != NULL){
        timeForReceivingResponse = (secondsItem as Number).intValue
        logDebug("bassa.rules", "setting the time for Bassa/Aiguagrisa response alert to "+timeForReceivingResponse+"s") 
    }else{
        AlarmBassaComunicacio_Seconds.sendCommand(60)
        logWarn("bassa.rules", "setting the time for Bassa/Aiguagrisa response alert to the default "+timeForReceivingResponse+"s") 
    }

    var secondsAgo = timeForReceivingResponse + 1L
    val ultimaConnexioState = BassaUltimaConnexio.state
    logDebug("bassa.rules", "Ultima connexio obtained: "+ultimaConnexioState)
    if(ultimaConnexioState != NULL){
        val lastConnection = (ultimaConnexioState as DateTimeType).getZonedDateTime()
        logDebug("bassa.rules", "LastConnection time is "+lastConnection)
        secondsAgo = ChronoUnit.SECONDS.between(lastConnection, now);
        logDebug("bassa.rules", "Last connection Bassa time is "+secondsAgo+"s ago.")
    }else{
        logError("bassa.rules", "Can not read last connection Bassa (state is "+ultimaConnexioState+
        "), assuming already passed the time.")
    }
    
    if(secondsAgo > timeForReceivingResponse){
        BassaStatusConnexio.sendCommand("Offline")
        BassaAiguaGrisaStatusConnexio.sendCommand("Offline")
        BassaRegProxy.sendCommand("stop")
        BassaCirculacioProxy.sendCommand("stop")
        BassaAiguagrisaProxy.sendCommand("start")
        AlarmBassaComunicacio.postUpdate(ON)
        logError("bassa.rules","Not received comm from Bassa/Aiguagrisa since "+secondsAgo+"s ago, setting defaults")
    }else{
       logDebug("bassa.rules", "lastConnection was before threshold, so nothing to do ") 
    }
end

rule "Aigua grisa encesa per hores"
when Item BassaAiguagrisaHoraEncesa changed
    or Item BassaAiguagrisaHoraApagat changed
    or Time cron "0 0 * ? * * *" //every hour
then
    logDebug("bassa.rules","aiguagrisa: checking the hora encesa")
    var horaEncesa = 0
    val horaEncesaState = BassaAiguagrisaHoraEncesa.state
    if(horaEncesaState != NULL){
        horaEncesa = (horaEncesaState as Number).intValue
    }
    var horaApagat = 24
    val horaApagatState = BassaAiguagrisaHoraApagat.state
    if(horaApagatState != NULL){
        horaApagat = (horaApagatState as Number).intValue
    }
    if(horaApagat == 0 && horaEncesa == 24){
        BassaAiguagrisaHoraDescripcio.postUpdate("Sempre apagada")
    }else if(horaApagat == 24 && horaEncesa == 0){
        BassaAiguagrisaHoraDescripcio.postUpdate("Sempre encesa")
    }else if(horaApagat == horaEncesa){
        BassaAiguagrisaHoraDescripcio.postUpdate("Sempre encesa")
    }else{
        BassaAiguagrisaHoraDescripcio.postUpdate("Encesa de "+horaEncesa+" a "+horaApagat)
    }

    val now = ZonedDateTime::now
    val currentHour = now.getHour()

    logDebug("bassa.rules","Checking if aiguagrisa should be open: current "+currentHour+", encesa "+horaEncesa+", apagat "+horaApagat)

    if(currentHour >= horaApagat && currentHour >= horaEncesa){
        //we are after encesa and apagat, so the latest is the state we should have
        if(horaApagat > horaEncesa){
            logDebug("bassa.rules","aiguagrisa: Current hour after encesa & apagat, apagat is later so turning off")
            BassaAiguagrisaProxy.sendCommand("stop")
        }else{
            logDebug("bassa.rules","aiguagrisa: Current hour after encesa & apagat, encesa is later so turning on")
            BassaAiguagrisaProxy.sendCommand("start")
        }
    }else if( horaApagat > currentHour &&  horaEncesa > currentHour){
        //we are before encesa and apagat, so the latest is the state we should have
        if(horaApagat > horaEncesa){
            logDebug("bassa.rules","aiguagrisa: Current hour before encesa & apagat, apagat is later so turning off")
            BassaAiguagrisaProxy.sendCommand("stop")
        }else{
            logDebug("bassa.rules","aiguagrisa: Current hour before encesa & apagat, encesa is later so turning on")
            BassaAiguagrisaProxy.sendCommand("start")
        }
    }else if(currentHour >= horaEncesa){
        //we are after encesa, but before apagat, so turning on
        logDebug("bassa.rules","aiguagrisa: Current hour between encesa & apagat, encesa is before so turning on")
        BassaAiguagrisaProxy.sendCommand("start")
    }else{
        logDebug("bassa.rules","aiguagrisa: Current hour between encesa & apagat, apagat is before so turning off")
        BassaAiguagrisaProxy.sendCommand("stop")
    }
end

rule "Canvi de missatge circulacio"
when Item BassaCirculacioHoraEncesa changed
    or Item BassaCirculacioHoraApagat changed
    or Item BassaModeCirculacio changed
    or Item BassaCirculacioCadencia changed
then
    var modeString = "hores"
    val modeState = BassaModeCirculacio.state
    if(modeState != NULL){
        logDebug("bassa.rules","circulacio: the mode item is not null")
        modeString = modeState.toString
    }
    if(modeString == "hores"){
        logDebug("bassa.rules","circulacio: mode is 'hores', checking the hora encesa")
        var horaEncesa = 0
        val horaEncesaState = BassaCirculacioHoraEncesa.state
        if(horaEncesaState != NULL){
            horaEncesa = (horaEncesaState as Number).intValue
        }
        var horaApagat = 24
        val horaApagatState = BassaCirculacioHoraApagat.state
        if(horaApagatState != NULL){
            horaApagat = (horaApagatState as Number).intValue
        }
        var cadencia = 50
        val cadenciaState = BassaCirculacioCadencia.state
        if(cadenciaState != NULL){
            cadencia = (cadenciaState as Number).intValue
        }
        val cadenciaText = ", "+cadencia+"% del temps"

        if(horaApagat == 0 && horaEncesa == 24){
            BassaCirculacioDescripcio.postUpdate("Sempre apagada")
        }else if(horaApagat == 24 && horaEncesa == 0){
            BassaCirculacioDescripcio.postUpdate("Sempre encesa"+cadenciaText)
        }else if(horaApagat == horaEncesa){
            BassaCirculacioDescripcio.postUpdate("Sempre encesa"+cadenciaText)
        }else{
            BassaCirculacioDescripcio.postUpdate("Encesa de "+horaEncesa+" a "+horaApagat+cadenciaText)
        }
    }else{
        BassaCirculacioDescripcio.postUpdate("Si sobra energia")
    }

end

rule "Circulacio encesa per hores"
when Item BassaCirculacioHoraEncesa changed
    or Item BassaCirculacioHoraApagat changed
    or Item BassaModeCirculacio changed
    or Item BassaCirculacioCadencia changed
    or Time cron "0 * * ? * * *" //every minute
then
    var modeString = "hores"
    val modeState = BassaModeCirculacio.state
    if(modeState != NULL){
        logDebug("bassa.rules","circulacio: the mode item is not null")
        modeString = modeState.toString
    }
    logDebug("bassa.rules","circulacio: the mode is "+modeString)
    if(modeString == "hores"){
        logDebug("bassa.rules","circulacio: mode is 'hores', checking the hora encesa")
        var horaEncesa = 0
        val horaEncesaState = BassaCirculacioHoraEncesa.state
        if(horaEncesaState != NULL){
            horaEncesa = (horaEncesaState as Number).intValue
        }
        var horaApagat = 24
        val horaApagatState = BassaCirculacioHoraApagat.state
        if(horaApagatState != NULL){
            horaApagat = (horaApagatState as Number).intValue
        }
        var cadencia = 50
        val cadenciaState = BassaCirculacioCadencia.state
        if(cadenciaState != NULL){
            cadencia = (cadenciaState as Number).intValue
        }

        val now = ZonedDateTime::now
        val currentHour = now.getHour()
        val currentMinute = now.getMinute()

        logDebug("bassa.rules","Checking if circulacio should be open due to cadencia ("+cadencia+"), minute: "+currentMinute)

        if(cadencia >= ((currentMinute % 10)+1)*10){
            logDebug("bassa.rules","Current minute is within cadencia")
            logDebug("bassa.rules","Checking if circulacio should be open: current "+currentHour+", encesa "+horaEncesa+", apagat "+horaApagat)

            if(currentHour >= horaApagat && currentHour >= horaEncesa){
                //we are after encesa and apagat, so the latest is the state we should have
                if(horaApagat > horaEncesa){
                    logDebug("bassa.rules","circulacio: Current hour after encesa & apagat, apagat is later so turning off")
                    Ordre_Encesa_Bomba_Depuradora.sendCommand(OFF)
                }else{
                    logDebug("bassa.rules","circulacio: Current hour after encesa & apagat, encesa is later so turning on depuradora")
                    Ordre_Encesa_Bomba_Depuradora.sendCommand(ON)
                }
            }else if( horaApagat > currentHour &&  horaEncesa > currentHour){
                //we are before encesa and apagat, so the latest is the state we should have
                if(horaApagat > horaEncesa){
                    logDebug("bassa.rules","circulacio: Current hour before encesa & apagat, apagat is later so turning off")
                    Ordre_Encesa_Bomba_Depuradora.sendCommand(OFF)
                }else{
                    logDebug("bassa.rules","circulacio: Current hour before encesa & apagat, encesa is later so turning on depuradora")
                    Ordre_Encesa_Bomba_Depuradora.sendCommand(ON)
                }
            }else if(currentHour >= horaEncesa){
                //we are after encesa, but before apagat, so turning on
                logDebug("bassa.rules","circulacio: Current hour between encesa & apagat, encesa is before so turning on depuradora")
                Ordre_Encesa_Bomba_Depuradora.sendCommand(ON)
            }else{
                logDebug("bassa.rules","circulacio: Current hour between encesa & apagat, apagat is before so turning off")
                Ordre_Encesa_Bomba_Depuradora.sendCommand(OFF)
            }
        }else{
            logDebug("bassa.rules","Current minute is NOT within cadencia")
            Ordre_Encesa_Bomba_Depuradora.sendCommand(OFF)
        }
    }else{
        logDebug("bassa.rules","circulacio: The mode is not 'hores', so doing nothing")
    }
end

//rules to manage unused power

rule "Potencia disponible bomba"
when
	Item Bassa_AvailablePower received command
then
    var modeString = "hores"
    val modeState = BassaModeCirculacio.state
    if(modeState != NULL){
        logDebug("bassa.rules","circulacio: the mode item is not null")
        modeString = modeState.toString
    }

    var requiredPower = 0.0

    logDebug("bassa.rules","circulacio: the mode is "+modeString)
    if(modeString == "unusedPower"){
        val oldPowerState = receivedCommand
        var availablePower = 0.0
        if(oldPowerState != NULL){
            availablePower = (oldPowerState as Number).doubleValue
        }
        if(availablePower >= USED_POWER){
            logInfo("bassa.rules", "As available power is "+availablePower+",  required power set to the same")
            requiredPower = USED_POWER
        }else{
            logInfo("bassa.rules", "As available power is "+availablePower+",  required power set to 0.0")
            requiredPower = 0.0
        }
    }else{
		logDebug("bassa.rules", "Received unused power, but basa is not unused power mode")
	}
    Bassa_RequiredPower.sendCommand(requiredPower)
end

rule "update bassa required power"
when
	Item Bassa_RequiredPower received command
then
    logInfo("bassa.rules", "Required power updated, notifying the DestinationDeviceUpdated")
	DestinationDeviceUpdated.sendCommand("bassa")
end

rule "Apply power bassa"
when
	Item Bassa_ApplyChange received command
then
    var modeString = "hores"
    val modeState = BassaModeCirculacio.state
    if(modeState != NULL){
        logDebug("bassa.rules","circulacio: the mode item is not null")
        modeString = modeState.toString
    }
    logDebug("bassa.rules","circulacio: the mode is "+modeString)
    if(modeString == "unusedPower"){
        var circulacioString = "off"
        val circulacioState = BassaCirculacioStatus.state
        if(circulacioState != NULL){
            logDebug("bassa.rules","circulacio: the circulacio proxy item is not null")
            circulacioString = circulacioState.toString
        }

        if(circulacioString != "depuradora"){
            logInfo("bassa.rules", "Circulacio is not depuradora, so the used power currently is 0")
            Bassa_UsedPower.sendCommand(0)
        }else{
            logInfo("bassa.rules", "Circulacio is depuradora, so the used powuer currently is "+powerToApply)
            Bassa_UsedPower.sendCommand(powerToApply)   
        }

        logInfo("bassa.rules", "Going to apply the required power, to decide if turning it ON or OFF")
        val requiredPowerState = Bassa_RequiredPower.state
        var powerToApply = 0
        if(requiredPowerState != NULL){
            powerToApply = (requiredPowerState as Number).intValue
        }
        logInfo("bassa.rules", "The required power to apply is "+powerToApply)

        if(powerToApply >= USED_POWER){
            //request to start the depuradora
            logInfo("bassa.rules", "Enough power to turn depuradora ON, let's do it")
            Ordre_Encesa_Bomba_Depuradora.sendCommand(ON)
        }else{
            logInfo("bassa.rules", "Not enough power to turn depuradora ON, turining it off")
            Ordre_Encesa_Bomba_Depuradora.sendCommand(OFF)
        }
           
        DestinationDeviceApplied.sendCommand("bassa")
    }else{
        logInfo("bassa.rules", "Gestio is not unusedPower, so not applying required power, but notifying as applied")
        Bassa_UsedPower.sendCommand(0)
        DestinationDeviceApplied.sendCommand("bassa")
    }
end


//rules to manage syncronization of bassa status and depuradora

rule "Ordre encesa bomba depuradora"
when
    Item Ordre_Encesa_Bomba_Depuradora changed
then
    val novaOrdre = newState
    logDebug("bassa.rules", "Ordre bomba depuradora received command "+novaOrdre+". Updating intent and sending to executor")
    val now = ZonedDateTime::now
    val nowDateType = new DateTimeType(now) 

    Intent_Canvi_Bomba_Depuradora.postUpdate(nowDateType) 
    logDebug("bassa.rules", "Updated Intent_Canvi_Bomba_Depuradora")

    if(novaOrdre == ON){
        Executor_Ordre_Encesa_Bomba_Depuradora.sendCommand(ON)
    }else{
        Executor_Ordre_Encesa_Bomba_Depuradora.sendCommand(OFF)
    }

    logDebug("bassa.rules", "Send command to Executor_Ordre_Encesa_Bomba_Depuradora")
end

rule "Executor ordre encesa bomba depuradora"
when
    Item Executor_Ordre_Encesa_Bomba_Depuradora received command
then
    val ordre = receivedCommand
    logDebug("bassa.rules", "Executor bomba depuradora received "+ordre)
    if(ordre == ON){
        BassaCirculacioChangeRequest.sendCommand(""+Circulacio_Leader_Bomba_Depuradora.name+",depuradora")
    }else{
        BassaCirculacioChangeRequest.sendCommand(""+Circulacio_Leader_Bomba_Depuradora.name+",off")
        BassaCirculacioChangeRequest.sendCommand(""+Circulacio_Leader_Bomba_Depuradora.name+",")
    }
end

rule "Ownership obtingut"
when
    Item Circulacio_Leader_Bomba_Depuradora received command 
then
    val ordre = receivedCommand
    if(ordre == "depuradora"){
        logDebug("bassa.rules", "Depuradora is the owner, and command is depuradora")
        //no need to do anything as the rule for succeit will update statuses
    }else if(ordre == "off"){
        logDebug("bassa.rules", "Depuradora is the owner, and command is off")
    }else if(ordre == ""){
        logDebug("bassa.rules", "Depuradora is not anymore the owner")
    }else{
        logError("bassa.rules", "Unexpected command when ownership is obrained")
    }
end

rule "Encesa diposit ha succeit"
when
    Item BassaCirculacioStatus changed 
then
    val nouEstat = newState
    val ordre = Ordre_Encesa_Bomba_Depuradora.state
    //only update time if new state is "depuradora" or "off" and matches the order
    if(
        (ordre == ON && nouEstat == "depuradora") ||
        (ordre == OFF && nouEstat == "off")
    ){
        logDebug("bassa.rules", "BassaCirculacioStatus changed to "+nouEstat+". Updating darrer canvi")
        val now = ZonedDateTime::now
        val nowDateType = new DateTimeType(now) 
        Estat_Bomba_Depuradora.sendCommand(ordre)
        Darrer_Canvi_Bomba_Depuradora.postUpdate(nowDateType)
    }
end

rule "Comprova alarma circulacio bassa"
when
    Item Comprovador_Alarma_Bomba_Depuradora received command
then
    logDebug("bassa.rules", "Checking alarma for circulacio")
    val minutsItem = AlarmBassaCirculacio_Seconds.state
    var timeForReceivingResponse = 15L
    if(minutsItem != NULL){
        timeForReceivingResponse = (minutsItem as Number).intValue
        logDebug("bassa.rules", "setting the time for circulacio bassa not in sync alert to "+timeForReceivingResponse+"s") 
    }else{
        AlarmBassaCirculacio_Seconds.sendCommand(15)
        logWarn("bassa.rules", "setting the time for circulacio bassa not in sync alert to the default "+timeForReceivingResponse+"s") 
    }

    var minutsAgo = timeForReceivingResponse + 1L
    val ultimaConnexioState = Intent_Canvi_Bomba_Depuradora.state
    logDebug("bassa.rules", "Ultima ordre sent: "+ultimaConnexioState)
    if(ultimaConnexioState != NULL){
        val lastConnection = (ultimaConnexioState as DateTimeType).getZonedDateTime()
        logDebug("bassa.rules", "Ultima ordre sent time is "+lastConnection)
            minutsAgo = ChronoUnit.SECONDS.between(lastConnection, now);
        logDebug("bassa.rules", "Ultima ordre sent is "+minutsAgo+"m ago.")
    }else{
        logError("bassa.rules", "Can not read Ultima ordre sent (state is "+ultimaConnexioState+
            "), assuming already passed the time.")
    }

    if(minutsAgo > timeForReceivingResponse){
        AlarmBassaCirculacio.postUpdate(ON)
    }
    
end

rule "Comprova canvi encesa bomba bassa circulacio"
when
    Time cron "0/15 * * * * * *" //every 15 secs
then
    val ordre = Ordre_Encesa_Bomba_Depuradora.state
    val state = Estat_Bomba_Depuradora.state

    if(state == ON && ordre == ON){
        logDebug("bassa.rules", "Checking status of bassa circulacio and both are ON")
        //if there was an alert, solve it as now it is in sync
        AlarmBassaCirculacio.postUpdate(OFF)

    }else if(state == OFF && ordre == ON){
        logDebug("bassa.rules", "Checking status of bassa circulacio and state is OFF and ordre is ON")

        Executor_Ordre_Encesa_Bomba_Depuradora.sendCommand(ON)
        Comprovador_Alarma_Bomba_Depuradora.sendCommand(ON)
        
    }else if(state == OFF && ordre == OFF){
        logDebug("bassa.rules", "Checking status of bassa circulacio and both are OFF")
        //if there was an alert, solve it as now it is in sync
        AlarmBassaCirculacio.postUpdate(OFF)
    }else if(state == ON && ordre == OFF){
        logDebug("bassa.rules", "Checking status of bassa circulacio and state is ON and ordre is OFF")
        Executor_Ordre_Encesa_Bomba_Depuradora.sendCommand(OFF)    //when it is run via MQTT, change here to send the message to command topic
        Comprovador_Alarma_Bomba_Depuradora.sendCommand(ON)
    }else{
        logWarn("bassa.rules", "Checking status of bassa circulacio and some state is null: Ordre-> "+ordre+", State -> "+state)
    }
end

//Bassa Circulacio Leader election
//if an item wants to get the lead it should send a STRING command to BassaCirculacioChangeRequest with the following format:
/*
<item_name>,<desired_command>

<item_name> must be unique for each owner, and <desired_command> must be one of the valid commands for BassaCirculacioCommand
if there is no owner or the onwer is the given <item_name>, the <desired_command> will be forwarded, and the <item_name> 
will be sent a command with <desired_command> to signal leader has been granted. If <desired_command> is "", then leadership will be released
and the <item_name> will be sent a command with "" to signal leader has been released.
*/

rule "Peticio obtencio leader"
when
    Item BassaCirculacioChangeRequest received command
then
    val ordre = receivedCommand
    val splits = ordre.toString.split(",")

    logDebug("bassa.candidate", "Received a request for ownership in the circulacio: "+ordre)

    if(splits.length != 2){
        logError("bassa.candidate", "The command for ownership has not two parts: "+ordre)
    }else{
        val candidate = splits.get(0)
        val command = splits.get(1)
        if(candidate == circulacioOwner || circulacioOwner == ""){
            logDebug("bassa.candidate", "The owner is the candidate, or there was no owner"+
                candidate+" vs "+circulacioOwner)
            if(command == ""){
                logDebug("bassa.candidate", "Owner releasing the ownership")
                circulacioOwner = ""
            }else{
                circulacioOwner = candidate
                val ownerItem = ScriptServiceUtil.getItemRegistry.getItem(candidate)
                if(ownerItem !=null){
                    logDebug("bassa.candidate", "Owner sending the command "+command)
                    BassaCirculacioCommand.sendCommand(command)
                    ownerItem.sendCommand(command)
                }else{
                    logError("bassa.candidate", "The owner for the circulacio is "
                        +"not a valid item, releasing ownership: "+candidate)
                    circulacioOwner = ""
                }
            }
        }else{
            logDebug("bassa.candidate", "the candidate is not the owner, doing nothing: "+
                candidate+" vs "+circulacioOwner)
        }
    }
end 